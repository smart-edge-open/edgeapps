# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2020 Intel Corporation

{{- range $scenarioIdx, $scenarioName := $.Values.scenario }}
{{- $args := dict "scenarioName" $scenarioName "Values" $.Values }}
{{- range $officeIdx := until ( int ( include "smtc.noffices" $args ) ) }}
{{- $officeName := printf "%s-office%d" $scenarioName (add $officeIdx 1) }}
{{- if contains $.Values.buildScope $officeName }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $officeName }}-smart-upload
  labels:
     app: {{ $officeName }}-smart-upload
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ $officeName }}-smart-upload
  template:
    metadata:
      labels:
        app: {{ $officeName }}-smart-upload
    spec:
      securityContext:
        fsGroup: {{ $.Values.groupId }}
      enableServiceLinks: false
      containers:
        - name: {{ $officeName }}-smart-upload
{{- if (len $.Values.connector.cloudHost) }}
          image: {{ $.Values.registryPrefix }}smtc_smart_upload_tunnelled:latest
{{- else }}
          image: {{ $.Values.registryPrefix }}smtc_smart_upload:latest
{{- end }}
          imagePullPolicy: IfNotPresent
          resources:
            limits:
                cpu: "50m"
          env:
            - name: QUERY
              value: "objects.detection.bounding_box.x_max-objects.detection.bounding_box.x_min>0.1"
            - name: OFFICE
              {{- $args := dict "scenarioName" $scenarioName "Values" $.Values "officeIdx" $officeIdx }}
              value: {{ include "smtc.env.office" $args | quote }}
            - name: DBHOST
              {{- $args := dict "officeName" $officeName "Values" $.Values }}
              value: {{ include "smtc.env.dbhost" $args | quote }}
            - name: STHOSTL
              value: "http://{{ $officeName }}-storage-service:8080/recording"
{{- if (len $.Values.connector.cloudHost) }}
            - name: STHOSTC
              value: "http://localhost:8080/api/upload"
            - name: FORWARD_TUNNEL1
              value: "{{ $.Values.connector.cloudHost }}:{{ $.Values.connector.cloudStoragePort }} localhost:8080"
{{- else }}
            - name: STHOSTC
              value: "http://cloud-storage-service:8080/api/upload"
{{- end }}
            - name: SERVICE_INTERVAL
              value: "30"
            - name: NO_PROXY
              value: "*"
            - name: no_proxy
              value: "*"
          volumeMounts:
            - mountPath: /etc/localtime
              name: timezone
              readOnly: true
{{- if (len $.Values.connector.cloudHost) }}
            - mountPath: /etc/hostkey
              name: hostkey
              readOnly: true
{{- end }}
      volumes:
          - name: timezone
            hostPath:
              path: /etc/localtime
              type: File
{{- if (len $.Values.connector.cloudHost) }}
          - name: hostkey
            secret:
              secretName: tunnel-secret
              defaultMode: 0440
{{- end }}
      {{ include "smtc.platform.node-selector" $ }}

{{- end }}

---

{{- end }}
{{- end }}
