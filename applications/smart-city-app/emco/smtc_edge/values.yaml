# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2020 Intel Corporation

# docker registry prefix
registryPrefix: "smartcity/"

# platform specifies the target platform: Xeon or VCAC-A.
platform: "Xeon"

# framework specifies the target framework: gst or ffmpeg.
framework: "gst"

# scenario specifies the sample scenario(s) as a list: traffic or stadium. As each 
# scenario runs its own set of services and databases, it is recommended that you
# run multiple scenarios only on a multiple-node deployment.
scenario: 
  - "traffic"

# noffices specifies the number of offices in the deployment. Support 1-3
# offices in the traffic scenario and 1 office in the stadium scenario.
noffices: 1

# nCameras specifies the number of cameras served in each office. Currently
# support 1-8 cameras. 
ncameras: 
  traffic: 5
  svcq: 5
  crowd: 5
  entrance: 5

# nAnalytics specifies the number of analytics instances running in each office.
nanalytics: 
  traffic: 1
  svcq: 1
  crowd: 1
  entrance: 1

# cloudWebExternalIP specifies the external IP to access the Smart City or
# Stadium Sample web-cloud GUI
cloudWebExternalIP: ""

# officeLocations provide simulated GPS coordinates for the Smart City & Stadium
# offices
officeLocations:
  traffic:
  - "45.539626,-122.929569"
  - "45.524460,-122.960475"
  - "45.543645,-122.984178"
  stadium:
  - "37.39856,-121.94866"


# networkPreference specifies the analytics model precision: FP32, INT8 or FP16, or their 
# combination as a comma delimited string. 
networkPreference: "FP32"

# default settings for IP camera simulation & discovery.
discoverSimulatedCamera: true
cameraRTSPPort:   17000
cameraRTPPort:    27000
cameraPortStep:   10
discoverIPCamera: false

# optional: provide Linux user id & group permissioned to access cloud storage
# userID is obtained using command: `$ id -u`
# groupID is obtained using command: `$ id -g`
userId: 0
groupId: 0

# optional: build scope: one of "", "cloud", or "officeN"
buildScope: ""

# optional: specify connector hosts if they are from different Kubernetes clusters.
connector:
    cloudHost: ""
    cloudQueryPort: 29200
    cloudTransportPort: 29300
    officeTransportPort: 29301
    cloudStoragePort: 28080
    officeStoragePort: 28081

